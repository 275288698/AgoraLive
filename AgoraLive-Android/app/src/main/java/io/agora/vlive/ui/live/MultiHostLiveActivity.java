package io.agora.vlive.ui.live;

import android.graphics.Color;
import android.graphics.Outline;
import android.graphics.PixelFormat;
import android.graphics.Rect;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.style.AbsoluteSizeSpan;
import android.text.style.ForegroundColorSpan;
import android.util.Log;
import android.view.SurfaceView;
import android.view.View;
import android.view.ViewOutlineProvider;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.RelativeLayout;

import androidx.annotation.NonNull;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.appcompat.widget.AppCompatTextView;

import java.util.List;

import io.agora.framework.VideoModule;
import io.agora.framework.channels.CameraVideoChannel;
import io.agora.framework.channels.ChannelManager;
import io.agora.rtm.ErrorInfo;
import io.agora.rtm.ResultCallback;
import io.agora.vlive.Config;
import io.agora.vlive.R;
import io.agora.vlive.proxy.struts.model.SeatInfo;
import io.agora.vlive.proxy.struts.request.AudienceListRequest;
import io.agora.vlive.proxy.struts.request.ModifySeatStateRequest;
import io.agora.vlive.proxy.struts.request.Request;
import io.agora.vlive.proxy.struts.request.RoomRequest;
import io.agora.vlive.proxy.struts.response.AudienceListResponse;
import io.agora.vlive.proxy.struts.response.EnterRoomResponse;
import io.agora.vlive.proxy.struts.response.ModifySeatStateResponse;
import io.agora.vlive.proxy.struts.response.Response;
import io.agora.vlive.proxy.struts.response.SeatStateResponse;
import io.agora.vlive.ui.actionsheets.InviteUserActionSheet;
import io.agora.vlive.ui.components.CameraTextureView;
import io.agora.vlive.ui.components.LiveMultiHostSeatLayout;
import io.agora.vlive.ui.components.LiveMessageEditLayout;
import io.agora.vlive.ui.components.SeatItemDialog;
import io.agora.vlive.utils.UserUtil;

public class MultiHostLiveActivity extends LiveRoomActivity implements View.OnClickListener,
        LiveMultiHostSeatLayout.LiveHostInSeatOnClickedListener,
        InviteUserActionSheet.InviteUserActionSheetListener,
        SeatItemDialog.OnSeatDialogItemClickedListener {

    /**
     * Helps control UI of the room owner position.
     * Note this manager only change UI, but not
     * involving other logic like start/stop
     * video capture.
     */
    private class OwnerUIManager {
        String userId;
        int profileIconRes;
        int rtcUid;

        // Contains either user profile icon (when video is not
        // available), or user video (local or remote)
        FrameLayout userLayout;
        AppCompatImageView profileImage;

        // for local rendering
        CameraTextureView localPreview;

        // for remote rendering, generated by rtc engine.
        SurfaceView remotePreview;

        // If I am the room owner
        boolean iAmOwner;
        boolean videoMuted;
        boolean audioMuted;

        OwnerUIManager(@NonNull RelativeLayout layout, String userId, boolean iAmOwner, int rtcUid) {
            userLayout = layout.findViewById(R.id.room_owner_video_layout);
            this.userId = userId;
            this.profileIconRes = UserUtil.getUserProfileIcon(userId);
            this.iAmOwner = iAmOwner;
            this.rtcUid = rtcUid;

            videoMuted = !iAmOwner;
            audioMuted = !iAmOwner;
            showUserProfile();
        }

        private void showUserProfile() {
            profileImage = new AppCompatImageView(userLayout.getContext());
            profileImage.setImageResource(profileIconRes);
            profileImage.setClipToOutline(true);
            profileImage.setOutlineProvider(new RoomOwnerOutline());
            profileImage.setScaleType(ImageView.ScaleType.FIT_XY);
            userLayout.removeAllViews();
            userLayout.addView(profileImage);
        }

        void showVideoUI() {
            userLayout.removeAllViews();
            if (iAmOwner) {
                localPreview = new CameraTextureView(userLayout.getContext());
                localPreview.setClipToOutline(true);
                localPreview.setOutlineProvider(new RoomOwnerOutline());
                userLayout.addView(localPreview);
            } else {
                remotePreview = setupRemoteVideo(rtcUid);
                remotePreview.setClipToOutline(true);
                remotePreview.setOutlineProvider(new RoomOwnerOutline());
                userLayout.addView(remotePreview);
            }
        }

        void removeVideoUI(boolean showProfile) {
            if (iAmOwner && localPreview != null &&
                localPreview.getParent() == userLayout) {
                userLayout.removeAllViews();
                localPreview = null;
            } else if (!iAmOwner && remotePreview != null &&
                remotePreview.getParent() == userLayout) {
                userLayout.removeAllViews();
                remotePreview = null;
            }

            if (showProfile) showUserProfile();
        }
    }

    private class RoomOwnerOutline extends ViewOutlineProvider {
        private int mRadius = getResources().getDimensionPixelSize(R.dimen.live_host_in_owner_video_radius);

        @Override
        public void getOutline(View view, Outline outline) {
            Rect rect = new Rect();
            view.getGlobalVisibleRect(rect);
            int leftMargin = 0;
            int topMargin = 0;
            Rect selfRect = new Rect(leftMargin, topMargin,
                    rect.right - rect.left - leftMargin,
                    rect.bottom - rect.top - topMargin);
            outline.setRoundRect(selfRect, mRadius);
        }
    }

    private ResultCallback<Void> mMessageResultCallback = new ResultCallback<Void>() {
        @Override
        public void onSuccess(Void aVoid) {

        }

        @Override
        public void onFailure(ErrorInfo errorInfo) {
            Log.e(TAG, errorInfo.getErrorDescription());
        }
    };

    private static final String TAG = MultiHostLiveActivity.class.getSimpleName();

    private static final int ROOM_NAME_HINT_COLOR = Color.rgb(101, 101, 101);
    private static final int ROOM_NAME_COLOR = Color.rgb(235, 235, 235);

    private CameraVideoChannel mVideoChannel = (CameraVideoChannel) VideoModule.
            instance().getVideoChannel(ChannelManager.ChannelID.CAMERA);

    private OwnerUIManager mOwnerUIManager;
    private InviteUserActionSheet mInviteUserListActionSheet;
    private LiveMultiHostSeatLayout mSeatLayout;

    // Generated by back end server according to room id
    private List<SeatInfo> mSeatInfoList;

    private boolean mHasAppliedForSeat;
    private boolean mHasInvitedUser;

    @Override
    protected void onPermissionGranted() {
        initUI();
    }

    private void initUI() {
        hideStatusBar(false);
        getWindow().setFormat(PixelFormat.TRANSLUCENT);
        setContentView(R.layout.activity_host_in);
        setRoomNameText();

        participants = findViewById(R.id.host_in_participant);
        participants.setUserLayoutListener(this);

        bottomButtons = findViewById(R.id.host_in_bottom_layout);
        bottomButtons.setLiveBottomButtonListener(this);
        bottomButtons.setHost(isHost);
        if (isOwner) bottomButtons.setBeautyEnabled(config().isBeautyEnabled());

        findViewById(R.id.live_bottom_btn_close).setOnClickListener(this);
        findViewById(R.id.live_bottom_btn_more).setOnClickListener(this);
        findViewById(R.id.live_bottom_btn_fun1).setOnClickListener(this);
        findViewById(R.id.live_bottom_btn_fun2).setOnClickListener(this);

        messageList = findViewById(R.id.message_list);
        messageEditLayout = findViewById(R.id.message_edit_layout);
        mMessageEditText = messageEditLayout.findViewById(LiveMessageEditLayout.EDIT_TEXT_ID);

        mOwnerUIManager = new OwnerUIManager(findViewById(
                R.id.room_owner_layout), ownerId, isOwner, ownerRtcUid);
        if (isOwner) {
             startCameraCapture();
             mOwnerUIManager.showVideoUI();
        }

        mSeatLayout = findViewById(R.id.live_host_in_seat_layout);
        mSeatLayout.setOwner(isOwner);
        mSeatLayout.setHost(false);
        mSeatLayout.setMyUserId(config().getUserProfile().getUserId());
        mSeatLayout.setSeatListener(this);
    }

    private void setRoomNameText() {
        String nameHint = getResources().getString(R.string.live_host_in_room_name_hint);
        SpannableString name = new SpannableString(nameHint + roomName);
        name.setSpan(new ForegroundColorSpan(ROOM_NAME_HINT_COLOR),
                0, nameHint.length(), Spannable.SPAN_INCLUSIVE_EXCLUSIVE);
        name.setSpan(new AbsoluteSizeSpan(getResources().getDimensionPixelSize(R.dimen.text_size_medium)),
                0, nameHint.length(), Spannable.SPAN_INCLUSIVE_EXCLUSIVE);
        name.setSpan(new ForegroundColorSpan(ROOM_NAME_COLOR),
                nameHint.length(), name.length(), Spannable.SPAN_INCLUSIVE_EXCLUSIVE);
        name.setSpan(new AbsoluteSizeSpan(getResources().getDimensionPixelSize(R.dimen.text_size_normal)),
                nameHint.length(), name.length(), Spannable.SPAN_INCLUSIVE_EXCLUSIVE);

        ((AppCompatTextView) findViewById(R.id.host_in_room_name)).setText(name);
    }

    @Override
    protected void onGlobalLayoutCompleted() {
        View topLayout = findViewById(R.id.host_in_top_participant_layout);
        RelativeLayout.LayoutParams params =
                (RelativeLayout.LayoutParams) topLayout.getLayoutParams();
        params.topMargin += systemBarHeight;
        topLayout.setLayoutParams(params);
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.live_bottom_btn_close:
                curDialog = showDialog(R.string.finish_broadcast_title,
                        R.string.finish_broadcast_message, this);
                break;
            case R.id.live_bottom_btn_more:
                showActionSheetDialog(ACTION_SHEET_TOOL, isHost, true, this);
                break;
            case R.id.live_bottom_btn_fun1:
                if (isHost) {
                    showActionSheetDialog(ACTION_SHEET_BG_MUSIC, true, true, this);
                } else {
                    showActionSheetDialog(ACTION_SHEET_GIFT, false, true, this);
                }
                break;
            case R.id.live_bottom_btn_fun2:
                if (isHost) {
                    // this button is hidden when current user is not host.
                    showActionSheetDialog(ACTION_SHEET_BEAUTY, true, true, this);
                }
                break;
            case R.id.dialog_positive_button:
                closeDialog();
                finish();

                break;
        }
    }

    @Override
    public void onBackPressed() {
        curDialog = showDialog(R.string.finish_broadcast_title,
                R.string.finish_broadcast_message,
                view -> {
                    closeDialog();
                    finish();
                });
    }

    @Override
    public void finish() {
        super.finish();
        if (isHost) {
            // The owner will reasonably be a host
            stopCameraCapture();
            mOwnerUIManager.removeVideoUI(false);
        }

        bottomButtons.clearStates(application());
    }

    @Override
    public void onRtcJoinChannelSuccess(String channel, int uid, int elapsed) {
        Log.i(TAG, "onRtcJoinChannelSuccess:" + channel + " uid:" + (uid & 0xFFFFFFFFL));
    }

    @Override
    public void onEnterRoomResponse(EnterRoomResponse response) {
        super.onEnterRoomResponse(response);
        if (response.code == Response.SUCCESS) {
            mSeatInfoList = response.data.room.coVideoSeats;
            if (mSeatInfoList != null && !mSeatInfoList.isEmpty()) {
                runOnUiThread(() -> {
                    participants.reset(response.data.room.total,
                            response.data.room.rankUsers);
                });
            }
        }
    }

    private void requestSeatStates() {
        RoomRequest param = new RoomRequest();
        param.roomId = roomId;
        param.token = config().getUserProfile().getToken();
        sendRequest(Request.SEAT_STATE, param);
    }

    @Override
    public void onRequestSeatStateResponse(SeatStateResponse response) {
        super.onRequestSeatStateResponse(response);
    }

    @Override
    public void onSeatAdapterHostInviteClicked(int position, View view) {
        Log.i(TAG, "onSeatAdapterHostInviteClicked:" + position);
        mInviteUserListActionSheet = (InviteUserActionSheet) showActionSheetDialog(
                ACTION_SHEET_INVITE_AUDIENCE, isHost, true, this);
        requestAudienceList();
    }

    private void requestAudienceList() {
         sendRequest(Request.AUDIENCE_LIST, new AudienceListRequest(
                 config().getUserProfile().getToken(),
                 roomId, null, AudienceListRequest.TYPE_AUDIENCE));
    }

    @Override
    public void onAudienceListResponse(AudienceListResponse response) {
        if (mInviteUserListActionSheet != null &&
            mInviteUserListActionSheet.isShown()) {
            mInviteUserListActionSheet.append(response.data.list);
        }
    }

    @Override
    public void onSeatAdapterAudienceApplyClicked(int position, View view) {
        Log.i(TAG, "onSeatAdapterAudienceApplyClicked:" + position);
        curDialog = showDialog(R.string.live_room_host_in_audience_apply_title,
                R.string.live_room_host_in_audience_apply_message,
                v -> {
                    mHasAppliedForSeat = true;
                    audienceApplyForSeat(position);
                    closeDialog();
                });
    }

    private void audienceApplyForSeat(int position) {
        Log.i(TAG, "audience apply for a seat:");
        Config.UserProfile profile = config().getUserProfile();
        getMessageManager().apply(profile.getUserId(),
                profile.getUserName(), position, mMessageResultCallback);
    }

    @Override
    public void onRtmAppliedForSeat(String peerId, String nickname, int index) {
        Log.i(TAG, nickname + " applies for seat " + index);
        // If I am the room owner, the method is called when
        // some audience applies to be a host, and he is
        // waiting for my response
        if (!isOwner) return;
        String title = getResources().getString(R.string.live_room_host_in_audience_apply_title);
        String message = getResources().getString(R.string.live_room_host_in_audience_apply_owner_message);
        message = String.format(message, nickname, 0);
        curDialog = showDialog(title, message,
                R.string.dialog_positive_button_accept, R.string.dialog_negative_button_refuse,
                view -> {
                    ModifySeatStateRequest request = new ModifySeatStateRequest(
                            config().getUserProfile().getToken(), roomId,
                            config().getUserProfile().getUserId(), index, SeatInfo.TAKEN);
                    sendRequest(Request.MODIFY_SEAT_STATE, request);
                    getMessageManager().acceptApplication(peerId, nickname, index, mMessageResultCallback);
                    curDialog.dismiss();
                },
                view -> {
                    getMessageManager().rejectApplication(peerId, nickname, mMessageResultCallback);
                    curDialog.dismiss();
                });
    }

    @Override
    public void onRtmInvitedByOwner(String peerId, String nickname, int index) {
        Log.i(TAG, "Invited by room owner " + nickname + " for seat " + index);
        if (isOwner) return;
        String title = getResources().getString(R.string.live_room_host_in_invite_user_list_action_sheet_title);
        String message = getResources().getString(R.string.live_room_host_in_invited_by_owner);
        message = String.format(message, nickname, index);
        curDialog = showDialog(title, message,
                R.string.dialog_positive_button_accept, R.string.dialog_negative_button_refuse,
                view -> {
                    ModifySeatStateRequest request = new ModifySeatStateRequest(
                            config().getUserProfile().getToken(), roomId,
                            config().getUserProfile().getUserId(), index, SeatInfo.TAKEN);
                    sendRequest(Request.MODIFY_SEAT_STATE, request);
                    getMessageManager().acceptInvitation(peerId, nickname, index, mMessageResultCallback);
                    curDialog.dismiss();
                },
                view -> {
                    getMessageManager().rejectInvitation(peerId, nickname, mMessageResultCallback);
                    curDialog.dismiss();
                });
    }

    @Override
    public void onRtmApplicationRejected(String peerId, String nickname) {
        Log.i(TAG, "Seat application is rejected by the room owner");
        String title = getResources().getString(R.string.live_room_host_in_invite_rejected);
        String message = getResources().getString(R.string.live_room_host_in_invite_rejected_message);
        message = String.format(message, nickname);
        curDialog = showSingleButtonConfirmDialog(title, message, view -> {
            curDialog.dismiss();
        });
    }

    @Override
    public void onRtmInvitationRejected(String peerId, String nickname) {
        Log.i(TAG, "The audience has rejected your invitation");
        String title = getResources().getString(R.string.live_room_host_in_apply_rejected);
        String message = getResources().getString(R.string.live_room_host_in_apply_rejected_message);
        message = String.format(message, nickname);
        curDialog = showSingleButtonConfirmDialog(title, message, view -> {
            curDialog.dismiss();
        });
    }

    @Override
    public void onSeatAdapterMoreClicked(int position, View view, int seatState, int audioMuteState) {
        Log.i(TAG, "onSeatAdapterMoreClicked");
        if (isOwner || isHost) {
            int mode = isOwner ? SeatItemDialog.MODE_OWNER : SeatItemDialog.MODE_HOST;
            SeatItemDialog dialog = new SeatItemDialog(this, seatState,
                    audioMuteState, mode, view, position, this);
            dialog.show();
        }
    }

    @Override
    public SurfaceView onSeatAdapterItemVideoShowed(int position, int uid) {
        return null;
    }

    @Override
    public void onSeatAdapterItemVideoRemoved(int position, SurfaceView view) {

    }

    @Override
    public void onSeatDialogItemClicked(int position, SeatItemDialog.Operation operation) {
        Log.i(TAG, "onSeatDialogItemClicked: position=" + position + " operation:" + operation.toString());
    }

    @Override
    public void onSeatAdapterPositionClosed(int position, View view) {
        Log.i(TAG, "onSeatAdapterAudienceApplyClicked:" + position);
    }

    @Override
    public void onActionSheetAudienceInvited(AudienceListResponse.AudienceInfo user) {
        Log.i(TAG, "onActionSheetAudienceInvited");
    }

    @Override
    public void onRtmHostStateChanged(String uid, int index, int operate) {

    }

    @Override
    public void onActionSheetVideoClicked(boolean muted) {
        super.onActionSheetVideoClicked(muted);
        if (!isHost) return;
        if (isOwner) {
            if (muted) {
                stopCameraCapture();
                mOwnerUIManager.removeVideoUI(true);
            } else {
                startCameraCapture();
                mOwnerUIManager.showVideoUI();
            }
        } else {
            // Report the change state to server
        }
    }
}
